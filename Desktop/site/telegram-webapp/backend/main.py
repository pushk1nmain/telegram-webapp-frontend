from fastapi import FastAPI, HTTPException, Depends, Header, Request
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session
from sqlalchemy.exc import IntegrityError
from pydantic import BaseModel, Field, ConfigDict
from typing import Optional, List
from datetime import datetime, time
import pytz
from sqlalchemy import text 

from database import get_db, create_tables
from models import User
from telegram_auth import validate_telegram_data, extract_user_from_init_data
from config import settings

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI
app = FastAPI(
    title="Telegram WebApp API",
    description="API –¥–ª—è –æ–±—É—á–∞—é—â–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ Telegram WebApp",
    version="1.0.0"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "PATCH", "DELETE"],
    allow_headers=["*"],
)

# Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è API (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è Pydantic 2.11+)
class UserCreate(BaseModel):
    telegram_id: int
    username: Optional[str] = None

class UserUpdate(BaseModel):
    name: Optional[str] = Field(None, min_length=2, max_length=50)
    town: Optional[str] = Field(None, min_length=2, max_length=50)
    premium: Optional[bool] = None
    progress_step: Optional[int] = Field(None, ge=0)
    lesson: Optional[int] = Field(None, ge=0)
    preferred_lesson_time: Optional[time] = None
    energy: Optional[int] = Field(None, ge=0, le=100)
    tz_offset: Optional[int] = Field(None, ge=-12, le=12)

class UserResponse(BaseModel):
    model_config = ConfigDict(from_attributes=True)  # –ù–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è Pydantic 2.11+
    
    id: int
    telegram_id: int
    username: Optional[str]
    name: str
    town: str
    premium: bool
    progress_step: int
    lesson: int
    energy: int
    letters_received: int
    created_at: datetime
    is_active: bool

# Dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –¥–∞–Ω–Ω—ã—Ö
async def verify_telegram_user(
    request: Request,
    x_telegram_init_data: Optional[str] = Header(None)
) -> dict:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram"""
    
    # –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∂–µ–º –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
    if settings.DEBUG and not x_telegram_init_data:
        return {"id": 123456789, "username": "debug_user"}
    
    if not x_telegram_init_data:
        raise HTTPException(status_code=401, detail="Telegram –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
    user_data = validate_telegram_data(x_telegram_init_data)
    if not user_data:
        user_data = extract_user_from_init_data(x_telegram_init_data)
        if not user_data:
            raise HTTPException(status_code=401, detail="–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ Telegram –¥–∞–Ω–Ω—ã–µ")
    
    return user_data

# –°–æ–±—ã—Ç–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è FastAPI 0.116+)
@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    try:
        create_tables()
        print("üöÄ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        print(f"üìä Debug —Ä–µ–∂–∏–º: {settings.DEBUG}")
        print(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {settings.DATABASE_URL.split('@')[1] if '@' in settings.DATABASE_URL else 'local'}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        raise

# –û—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "message": "Telegram WebApp API", 
        "status": "running", 
        "version": "1.0.0",
        "timestamp": datetime.now().isoformat()
    }

@app.get("/api/v1/health")
async def health_check(db: Session = Depends(get_db)):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        result = db.execute(text("SELECT 1"))
        db_status = "connected"
    except Exception as e:
        db_status = f"error: {str(e)}"
    
    return {
        "status": "OK",
        "database": db_status,
        "timestamp": datetime.now(pytz.timezone(settings.TIMEZONE)).isoformat(),
        "debug": settings.DEBUG
    }

@app.post("/api/v1/users")
async def create_or_get_user(
    user_data: UserCreate,
    db: Session = Depends(get_db),
    telegram_user: dict = Depends(verify_telegram_user)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ"""
    
    if user_data.telegram_id != telegram_user.get("id"):
        raise HTTPException(status_code=403, detail="–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ telegram_id")
    
    try:
        existing_user = db.query(User).filter(User.telegram_id == user_data.telegram_id).first()
        
        if existing_user:
            return {
                "success": True,
                "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω",
                "user": existing_user.to_dict(),
                "created": False
            }
        
        new_user = User(
            telegram_id=user_data.telegram_id,
            username=user_data.username or telegram_user.get("username"),
            premium=telegram_user.get("is_premium", False)
        )
        
        db.add(new_user)
        db.commit()
        db.refresh(new_user)
        
        print(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {new_user.telegram_id} - {new_user.name}")
        
        return {
            "success": True,
            "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω",
            "user": new_user.to_dict(),
            "created": True
        }
        
    except IntegrityError:
        db.rollback()
        existing_user = db.query(User).filter(User.telegram_id == user_data.telegram_id).first()
        return {
            "success": True,
            "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
            "user": existing_user.to_dict() if existing_user else None,
            "created": False
        }
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")

@app.patch("/api/v1/users/{telegram_id}")
async def update_user(
    telegram_id: int,
    user_update: UserUpdate,
    db: Session = Depends(get_db),
    telegram_user: dict = Depends(verify_telegram_user)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    if telegram_id != telegram_user.get("id"):
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    user = db.query(User).filter(User.telegram_id == telegram_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º model_dump –¥–ª—è Pydantic 2.11+
    update_data = user_update.model_dump(exclude_unset=True)
    
    for field, value in update_data.items():
        setattr(user, field, value)
    
    try:
        db.commit()
        db.refresh(user)
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: {user.telegram_id} - {user.name}")
        
        return {
            "success": True,
            "message": "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
            "user": user.to_dict()
        }
        
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")

@app.get("/api/v1/users/{telegram_id}", response_model=UserResponse)
async def get_user(
    telegram_id: int,
    db: Session = Depends(get_db),
    telegram_user: dict = Depends(verify_telegram_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    if telegram_id != telegram_user.get("id"):
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    user = db.query(User).filter(User.telegram_id == telegram_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return user

@app.get("/api/v1/users", response_model=List[UserResponse])
async def get_all_users(
    db: Session = Depends(get_db),
    skip: int = 0,
    limit: int = 100
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)"""
    users = db.query(User).offset(skip).limit(limit).all()
    return users

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    import uvicorn
    
    uvicorn.run(
        "main:app",
        host=settings.HOST,
        port=settings.PORT,
        reload=settings.DEBUG,
        log_level=settings.LOG_LEVEL.lower()
    )